<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
					    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.roomio.carret.mypage">
	
	
	<!-- 단골 리스트 -->
	<select id="getFrontBookmarkShop" parameterType="int" resultType="hashMap">
		
		select s.shop_idx,s.shop_name,s.address,se.sector_content,s.holiday,s.start_date,s.end_date,s.business_status,
		(select count(*) from shop_review sr where s.shop_idx = sr.shop_idx) as review_count,
		(select count(*) from member_and_shop mms where s.shop_idx = mms.shop_idx) as bookmark_count
		from member_and_shop ms
		inner join shop s
		on ms.shop_idx = s.shop_idx
		inner join sector se
		on s.sector_id = se.sector_id
		where ms.member_id = ${memberId}
		
	</select>

	<!-- 후기 리스트 -->
	
	<select id="getFrontReviewShop" parameterType="int" resultType="hashMap">
	
		select s.shop_idx,s.shop_name,s.address,se.sector_content,s.holiday,
		s.start_date,s.end_date,s.business_status,s.main_image,
		(select count(*) from shop_review sr where s.shop_idx = sr.shop_idx) as review_count,
		(select count(*) from member_and_shop mms where s.shop_idx = mms.shop_idx) as bookmark_count
		from shop_review r
		inner join shop s
		on r.shop_idx = s.shop_idx
		inner join sector se
		on s.sector_id = se.sector_id
		where r.member_id = ${memberId}
		
	</select>
	
	<!-- 자주묻는 질문 카테고리 -->
	<select id="getFrontFrequentQuestionCategory" resultType="hashMap">
		
		select frequent_question_category_id,content
		from frequent_question_category 
		
	</select>
	
	<!-- 자주묻는 질문 상세 페이지  -->
	<select id="getFrontFrequentQuestion" resultType="HashMap" parameterType="int">
		
		select f.title,f.content,fc.content as category_content
		from frequent_question f
		inner join frequent_question_category fc
		on f.frequent_question_category_id = fc.frequent_question_category_id
		where f.frequent_question_id = ${frequentQuestionId}
		
	</select>
	
	<!-- 공지사항 list -->
	<select id="getFrontNotice" resultType="HashMap">
		
		select notice_id,title,date_format(regdate,"%Y-%m-%d") as regdate
		from notice
		
	</select>	
	
	<resultMap type="hashMap" id="NoticeDetailMap">
		<result column="title" property="title"/>
		<result column="content" property="content"/>
		<result column="regdate" property="regdate"/>
		<collection property="imageList" javaType="list" ofType="string">
			<result column="name" property="name"/>
		</collection>
	</resultMap>
	
	<!-- 공지사항 상세 페이지 -->
	<select id="getFrontNoticeDetail" resultMap="NoticeDetailMap" parameterType="int">
		
		select n.title,n.content,date_format(n.regdate,"%Y-%m-%d") as regdate,i.name
		from notice n
		left join notice_image i
		on n.notice_id = i.notice_id
		where n.notice_id = ${noticeId}
		
	</select>
	
	<!-- 1:1 문의  회원정보 -->
	<select id="getFrontQuestionMemberInfo" parameterType="int" resultType="hashMap">
		select m.profile_image,m.name,d.area_name
		from member m
		inner join area_dong d
		on m.id = d.id
		where member_id = ${memberId}
	</select>
	
	<!-- 1:1문의 카테고리 정보 -->
	<select id="getFrontQuestionCategory" resultType="hashMap">
		select question_category_id,content
		from question_category
	</select>
	
	
		
	<!-- 1:1 문의 등록  -->
	<insert id="addFrontMemberQuestion" parameterType="hashMap">
	
		insert into question(member_id,question_category_id,question_content)
		values(${memberId},${questionCategoryId},#{questionContent})

		<selectKey resultType="int" keyProperty="memberId" order="AFTER">
       		SELECT LAST_INSERT_ID()
    	</selectKey>
    	
	</insert>
	
	<!-- 1:1문의 이미지 등록 -->
	<insert id="addFrontMemberQuestionImage" parameterType="java.util.List">
		insert into question_image(question_id,name)
		values
		<foreach item="item" separator="," collection="list">
			(${item.questionId},#{item.name})
		</foreach>
	</insert>
	
	<!-- 나의 문의 내역 확인 -->
	<select id="getFrontMemberQuestion" parameterType="int" resultType="hashMap">
		
		select q.question_content,qc.content,q.answer_status,date_format(q.regdate,"%Y-%m-%d") as regdate,
		qa.content as apply
		from question q
		inner join question_category qc
		on q.question_category_id = qc.question_category_id 
		left join question_answer qa
		on q.question_id = qa.question_id
		where q.member_id = ${memberId}
		
	</select>
	
	<!-- 자주묻는질문 목록 얻어오기 -->
	<select id="getFrontFreTitle" parameterType="int" resultType="hashMap">
		
		select f.frequent_question_id,f.title
		from frequent_question f
		inner join frequent_question_category fc
		on f.frequent_question_category_id = fc.frequent_question_category_id
		where f.frequent_question_category_id = ${id}
		
	</select>
	
	<!-- 자주묻는질문 상세 내용 -->
	<select id="getFrontFreDetail" parameterType="int" resultType="hashMap">
	
		select fc.content as cateContent,f.title,f.content
		from frequent_question f
		inner join frequent_question_category fc
		on f.frequent_question_category_id = fc.frequent_question_category_id
		where f.frequent_question_id = ${id}
	
	</select>
	
	<!-- 탈퇴 카테고리 -->
	<select id="getWithCategory" resultType="hashMap">
	
		select with_category_id,with_content
		from with_category
		
	</select>
	
	<!-- 맴버 탈퇴  -->
	<update id="memberWithDraw" parameterType="hashMap">
	
		update member
		set with_category_id = ${withCategoryId},with_reason=#{withContent}
		where member_id = ${memberId}
		
	</update>
	
	<!-- 지역 정보 얻어오기 -->
	<select id="getAreaList" parameterType="string" resultType="hashMap">
	
		select distinct id,area_name
		from area_dong 
		where LEFT(zip_code,3) = #{zipCode}
		GROUP BY area_name
		
	</select>
	
	<!-- 회원의 가게 리스트 얻어오기 -->
	<select id="getMyShop" parameterType="int" resultType="hashMap">
		
		select s.shop_idx,s.main_image,s.shop_name,d.area_name
		from shop s
		inner join area_dong d
		on s.id = d.id
		where member_id = ${memberId} 
		and activity_status = 1
	
	</select>
	
	<!-- 가게 정보 수정 -->
	<update id="updateShopInfo" parameterType="com.roomio.carret.bean.ShopInfoUpdateBean">
		
		update shop
		<set>
			<if test='address!=null and !address.equals("")'>address = #{address},</if>
			<if test='phone!=null and !phone.equals("")'>phone = #{phone},</if>
			<if test='intro!=null and !intro.equals("")'>intro_ph = #{intro},</if>
			<if test='holiday!=null and !holiday.equals("")'>holiday = #{holiday},</if>
			<if test='startDate!=null and !startDate.equals("")'>start_date = #{startDate},</if>
			<if test='endDate!=null and !endDate.equals("")'>end_date = #{endDate},</if>
			<if test='homepageUrl!=null and !homepageUrl.equals("")'>homepage_url = #{homepageUrl},</if>
			<if test='toBenefit!=null and !toBenefit.equals("")'>to_benefit = #{toBenefit},</if>
			<if test='noticeInfo!=null and !noticeInfo.equals("")'>notice_info = #{noticeInfo}</if>
		</set>
		where shop_idx = ${shopIdx}
	
	</update>
	
	<!-- 가격표 정보 얻어오기 -->
	<select id="getGoodsList" parameterType="int" resultType="hashMap">
	
		select goods_id,name,price,min_price,additional_info,best
		from goods 
		where shop_idx = ${shopIdx}
	
	</select>
	
	<!-- 가격표 insert -->
	<insert id="addGoods" parameterType="hashMap">
		
		insert into goods(shop_idx,name,price,min_price,additional_info,best)
		values(${shopIdx},#{name},#{price},#{minPrice},#{additionalInfo},${best})
	
	</insert>
	
	<!-- 가격표 input 정보 -->
	<select id="getGoodsInfo" parameterType="int" resultType="hashMap">
		
		select name,price,min_price,additional_info,best
		from goods
		where goods_id = ${goodsId}
		
	</select>
	
	<!-- 가격표 수정  -->
	
	<update id="updateGoodsInfo" parameterType="hashMap">
		
		update goods
		set name=#{name},best=${best},price=#{price},
		min_price=#{minPrice},additional_info=#{additionalInfo}
		where goods_id = ${goodsId}	
	
	
	</update>
	
	<!-- 가게 프로필 수정 필요한 정보들 얻어오기 -->
	
	<select id="getProInfo" parameterType="int" resultType="hashMap">
	
		select s.main_image,s.shop_name,s.id
		from shop s
		inner join area_dong d
		on s.id = d.id 
		where shop_idx = ${shopIdx}
		
	</select>
	
	<select id="getProImg" parameterType="int" resultType="String">
	
		select image_name
		from shop_image
		where shop_idx = ${shopIdx}
		
	</select>
	
	<select id="getProKeyword" parameterType="int" resultType="String">
		
		select keyword
		from shop_keyword
		where shop_idx = ${shopIdx}
		
	</select>
	
	<select id="checkShopName" parameterType="string" resultType="string">
		
		select shop_name
		from shop
		where shop_name = #{shopName}
	
	</select>
	
	<!-- 가게 프로필 업데이트 -->
	<update id="updateShopProfile" parameterType="com.roomio.carret.bean.ProfileUpdateBean">
	
		update shop
		set shop_name = #{shopName}, id = ${area}, main_image = #{mainImage}
		where shop_idx = ${shopIdx}
		
	</update>
	
	<!-- 가게 프로필 이미지 수정 -->
	
	<delete id="deleteShopImage" parameterType="int">
	
		delete from shop_image
		where shop_idx = ${shopIdx}
	
	</delete>
	
	<insert id="addShopImage" parameterType="list">
			
		insert into shop_image(shop_idx,image_name)
		values
		<foreach item="item" collection="list" separator=",">
			(${item.shopIdx},#{item.imageName})
		</foreach>
			
	</insert>
	
	
	<!-- 가게 키워드 수정  -->
	
	<delete id="deleteShopKeyword" parameterType="int">
	
		delete from shop_keyword
		where shop_idx = ${shopIdx}
		
	</delete> 
	
	<insert id="addShopKeyword" parameterType="hashMap">
		
		insert into shop_keyword(shop_idx,keyword)
		values
		<foreach item="item" collection="list" separator=",">
				(${item.shopIdx},#{item.keyword})
			</foreach>
	
	</insert>
	
	<!-- 가게별 단골  -->
	
	<select id="getShopBookmarkCnt" parameterType="int" resultType="int">
	
		select count(*)
		from member m
		left join member_and_shop ms
		on m.member_id = ms.member_id
		left join shop s
		on ms.shop_idx = s.shop_idx
		inner join area_dong d
		on m.id = d.id
		WHERE s.shop_idx = ${shopIdx}
	
	</select>
	
	<select id="getShopBookmark" parameterType="int" resultType="hashMap">
		
		select m.profile_image,m.name,d.area_name
		from member m
		left join member_and_shop ms
		on m.member_id = ms.member_id
		left join shop s
		on ms.shop_idx = s.shop_idx
		inner join area_dong d
		on m.id = d.id
		WHERE s.shop_idx = ${shopIdx}
	
	</select>
	
	<!-- 소식 글 카테고리 정보  -->
	<select id="getNewsCate" resultType="hashMap">
		
		select shop_news_category_id,cate_content
		from shop_news_category
	
	</select>
	
	<!-- 가게 소식 등록 -->
	<insert id="addShopNews" parameterType="hashMap">
		insert into shop_news(shop_idx,shop_news_category_id,title,content) 
		values(${shopIdx},${shopNewsCategoryId},#{title},#{content})
		
		<selectKey resultType="int" keyProperty="shopNewsId" order="AFTER">
       		SELECT LAST_INSERT_ID()
    	</selectKey>
	
	</insert>
	
	<!-- 가게 소식 이미지 등록  -->
	<insert id="addShopNewsImg" parameterType="list">
		insert into shop_news_image(shop_news_id,name)
		values
		<foreach item="item" separator="," collection="list">
			(${item.shopNewsId},#{item.name})
		</foreach>
	</insert>
	
	<resultMap type="hashMap" id="getReviewMap">
		<result column="shop_review_id" property="shop_review_id"/>
		<result column="nickName" property="nickName"/>
		<result column="reviewCnt" property="reviewCnt"/>
		<result column="view_count" property="view_count"/>
		<result column="reply" property="reply"/>
		<result column="regdate" property="regdate"/>
		<result column="profile_image" property="profile_image"/>
		<result column="likeCnt" property="likeCnt"/>
		<result column="content" property="content"/>
		<result column="member_id" property="member_id"/>
		<result column="area_name" property="area_name"/>
		<collection property="imageList" javaType="list" ofType="string">
			<result column="name" property="name"/>
		</collection>
		<collection property="keyList" javaType="list" ofType="string">
			<result column="keyword" property="keyword"/>
		</collection>
	</resultMap>
	
	<!-- 가게 후기 정보  -->
	<select id="getReviewList" parameterType="hashMap" resultMap="getReviewMap">
	
		select m.name as nickName,rkc.content as keyword,d.area_name,
		(select count(*) from shop_review r2 where r2.member_id = m.member_id) as reviewCnt,
		r.shop_review_id,r.content,r.view_count,r.reply,date_format(r.regdate,"%Y-%m-%d") as regdate,ri.name,m.profile_image,
		(select count(*) from shop_review_like rl where r.shop_review_id = rl.shop_review_id) as likeCnt,
		(select srl.member_id from shop_review_like srl where srl.member_id = ${memberId} and srl.shop_review_id = r.shop_review_id) AS member_id
		from shop_review r
		inner join member m
		on r.member_id = m.member_id
		inner join area_dong d
		on m.id = d.id
		left join shop_review_image ri 
		on r.shop_review_id = ri.shop_review_id 
		left join review_keyword rk
		on r.shop_review_id = rk.shop_review_id
		left join review_keyword_category rkc
		on rk.review_keyword_category_id = rkc.review_keyword_category_id
		where r.shop_idx = ${shopIdx}
		<choose>
			<when test='sort.equals("latest")'>
				order by regdate desc
			</when>
			<otherwise>
				order by likeCnt desc
			</otherwise>
		</choose>
		
	</select> 
	
	<resultMap type="hashMap" id="getReviewDeMap">
		<result column="shop_review_id" property="shop_review_id"/>
		<result column="nickName" property="nickName"/>
		<result column="reviewCnt" property="reviewCnt"/>
		<result column="view_count" property="view_count"/>
		<result column="reply" property="reply"/>
		<result column="regdate" property="regdate"/>
		<result column="likeCnt" property="likeCnt"/>
		<result column="content" property="content"/>
		<result column="profile_image" property="profile_image"/>
		<result column="area_name" property="area_name"/>
		<result column="member_id" property="member_id"/>
		<collection property="imageList" javaType="list" ofType="string">
			<result column="name" property="name"/>
		</collection>
		<collection property="keyList" javaType="list" ofType="string">
			<result column="keyword" property="keyword"/>
		</collection>
	</resultMap>
	
	<!-- 가게 후기 상세 정보  -->
	<select id="getReviewDetail" parameterType="hashMap" resultMap="getReviewDeMap">
	
		select m.name as nickName,
		(select count(*) from shop_review r2 where r2.member_id = m.member_id) as reviewCnt,
		r.shop_review_id,r.content,r.view_count,r.reply,r.regdate,ri.name,m.profile_image,
		(select count(*) from shop_review_like rl where r.shop_review_id = rl.shop_review_id) as likeCnt,
		(select srl.member_id from shop_review_like srl where srl.member_id = ${memberId} and srl.shop_review_id = r.shop_review_id) AS member_id,
		rkc.content as keyword,d.area_name 
		from shop_review r
		inner join member m
		on r.member_id = m.member_id
		inner join area_dong d
		on m.id = d.id
		left join shop_review_image ri 
		on r.shop_review_id = ri.shop_review_id 
		left join review_keyword rk
		on r.shop_review_id = rk.shop_review_id
		left join review_keyword_category rkc
		on rk.review_keyword_category_id = rkc.review_keyword_category_id
		where r.shop_review_id = ${shopReviewId}
		
	</select>
	
	<!-- 가게 후기 답글 등록 -->
	<update id="reviewReply" parameterType="hashMap">
		
		update shop_review
		set reply = #{reply}
		where shop_review_id = ${shopReviewId}
		
	</update>
	
	<!-- 본인 가게인지 확인 -->
	<select id="chkMemShop" parameterType="hashMap" resultType="string">
	
		select shop_name
		from shop
		where shop_idx= ${shopIdx}
		and member_id = ${memberId}
		
	</select>
	
	<!-- 탈퇴 사유 카테고리 -->
	<select id="getShopWithCategory" resultType="hashMap">
		
		select shop_with_category_id,content
		from shop_with_category
		
	</select>
	
	<!-- 가게 프로필 탈퇴 -->
	<update id="updateShopStatus" parameterType="hashMap">
	
		update shop
		set shop_with_category_id = ${id},
		with_content = #{content},
		activity_status = 2
		where shop_idx = ${shopIdx}
	
	</update>
	
</mapper>
